{"version":3,"sources":["components/Footer/Footer.tsx","components/Logo/Logo.tsx","components/NoAudioMessage/NoAudioMessage.tsx","components/AudioContextProvider/useAudioContext.ts","domain/audio.ts","domain/sound.ts","state/Instrument/Context.ts","state/Instrument/Provider.tsx","components/InstrumentSelector/options.ts","components/InstrumentSelector/InstrumentSelector.tsx","domain/keyboard.ts","domain/note.ts","components/PressObserver/usePressObserver.ts","components/Key/Key.tsx","components/Keyboard/Keyboard.tsx","components/Keyboard/WithInstrument.tsx","adapters/Soundfont/useSoundfont.ts","components/Playground/Playground.tsx","components/Main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Footer","currentYear","Date","getFullYear","className","href","Logo","role","aria-label","NoAudioMessage","useAudioContext","useRef","window","AudioContext","webkitAudioContext","current","DEFAULT_INSTRUMENT","InstrumentContext","createContext","instrument","setInstrument","useInstrument","Consumer","useContext","InstrumentContextProvider","children","useState","Provider","value","options","instruments","map","label","replace","InstrumentSelector","onChange","target","TOP_ROW","Array","from","BOTTOM_ROW","NATURAL_PITCH_INDICES","PITCH_REGISTRY","0","1","2","3","4","5","6","7","8","9","10","11","fromMidi","midi","pianoRange","index","octave","Math","floor","pitch","type","includes","notes","fromNote","toNote","fill","_","generateNotes","equal","watchedKey","eventCode","code","toUpperCase","Key","rest","pressed","watchKey","onFinishPress","onStartPress","setPressed","useEffect","handlePressStart","handlePressFinish","document","addEventListener","removeEventListener","usePressObserver","onDown","onUp","clsx","onMouseDown","onMouseUp","Keyboard","loading","play","stop","selectKey","disabled","KeyboardWithInstrument","activeNodes","setCurrent","setLoading","player","setPlayer","audio","a","Soundfont","resume","state","Promise","resolve","note","node","toString","load","useSoundfont","Playground","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sTAGaA,G,YAAa,WACxB,IAAMC,GAAc,IAAIC,MAAOC,cAC/B,OACE,yBAAQC,UAAU,SAAlB,UACE,mBAAGC,KAAK,qBAAR,wBACA,uBACCJ,OCNMK,G,MAAW,WACtB,OACE,qBAAIF,UAAU,OAAd,UACE,sBAAMG,KAAK,MAAMC,aAAW,mBAA5B,0BAGA,sBAAMD,KAAK,MAAMC,aAAW,yBAA5B,0BAGA,sBAAMD,KAAK,MAAMC,aAAW,sBAA5B,+BCVOC,G,MAAqB,WAEhC,OAAQ,gCACN,+DACA,yEAC0C,6CAD1C,YCFG,SAASC,IAEd,OADiBC,iBCFVC,OAAOC,cAAgBD,OAAOE,oBAAsB,MDG3CC,Q,WEALC,EAAqC,uBCGrCC,EAAoBC,wBAA4B,CAC3DC,WAAYH,EACZI,cAF2D,eAMhDC,GAD4BJ,EAAkBK,SAC9B,kBAAMC,qBAAWN,KCXjCO,EAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACzBC,mBAASV,GADgB,mBACtDG,EADsD,KAC1CC,EAD0C,KAG7D,OACE,cAACH,EAAkBU,SAAnB,CAA4BC,MAAO,CAAET,aAAYC,iBAAjD,SACGK,K,OCSA,IAAMI,EAAwBC,EANvBC,KAAI,SAACZ,GAAD,MAAiB,CAC/BS,MAAOT,EACPa,MAAOb,EAAWc,QAAQ,MAAO,SCRxBC,G,MAAyB,WAAO,IAAD,EACJb,IAA9BF,EADkC,EAClCA,WAAYC,EADsB,EACtBA,cAKpB,OACE,wBAAQhB,UAAU,aAAa+B,SAJb,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAClBhB,EAAcgB,EAAOR,QAGiCA,MAAOT,EAA7D,SACGU,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,MAAOJ,EAAV,EAAUA,MAAV,OACX,wBAAoBA,MAAOA,EAA3B,SACGI,GADUJ,U,sDCVd,IAAMS,EAAgBC,MAAMC,KAAK,gBAC3BC,EAAmBF,MAAMC,KAAK,gBCQ3C,IAQaE,EAAsC,CACjD,EACA,EACA,EACA,EACA,EACA,EACA,IAGWC,EAAgD,CAC3DC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,GAAI,IACJC,GAAI,KAGC,SAASC,EAASC,GACvB,IAAMC,EAAaD,EAlCE,GAsCfE,EAAQD,EAhCmB,GAsCjC,MAAO,CAAEE,OATOC,KAAKC,MAAMJ,EA7BM,IA8B/B,EAQeK,MALHpB,EAAegB,GAKLA,QAAOK,MAHdtB,EAAsBuB,SAASN,GACzB,QAAU,UAEIF,QAehC,IAAMS,EAPN,WAGkC,IAAD,yDAAZ,GAAY,IAFtCC,gBAEsC,MAtDjB,GAsDiB,MADtCC,cACsC,MArDjB,GAqDiB,EACtC,OAAO7B,MAAM6B,EAASD,EAAW,GAAGE,KAAK,GAAGrC,KAAI,SAACsC,EAAGX,GAAJ,OAAcH,EAASW,EAAWR,MAG/DY,G,sBCxDrB,SAASC,EAAMC,EAAsBC,GACnC,OANqBC,EAOLD,EALTC,EAAKzC,QADQ,cACa,KAKN0C,gBACzBH,EAAWG,cARf,IAAuBD,ECEhB,IAAME,EAAoB,SAAC,GAA8B,IAA5Bb,EAA2B,EAA3BA,KAAM/B,EAAqB,EAArBA,MAAU6C,EAAW,gCACvDC,EDSD,YAIkB,IAHvBC,EAGsB,EAHtBA,SACAC,EAEsB,EAFtBA,cACAC,EACsB,EADtBA,aACsB,EACQvD,oBAAoB,GAD5B,mBACfoD,EADe,KACNI,EADM,KAyBtB,OAtBAC,qBAAU,WACR,SAASC,EAAT,GAAoD,IAAxBV,EAAuB,EAAvBA,MACtBI,GAAYP,EAAMQ,EAAUL,KAChCQ,GAAW,GACXD,KAGF,SAASI,EAAT,GAAqD,IAAxBX,EAAuB,EAAvBA,KACtBI,GAAYP,EAAMQ,EAAUL,KAEjCQ,GAAW,GACXF,KAKF,OAFAM,SAASC,iBAAiB,UAAWH,GACrCE,SAASC,iBAAiB,QAASF,GAC5B,WACLC,SAASE,oBAAoB,UAAWJ,GACxCE,SAASE,oBAAoB,QAASH,MAEvC,CAACN,EAAUD,EAASI,EAAYD,EAAcD,IAE1CF,ECtCSW,CAAiB,CAC/BV,SAAU/C,EACViD,aAAcJ,EAAKa,OACnBV,cAAeH,EAAKc,OAGtB,OACE,gDACEvF,UAAWwF,YAAK,YAAD,OAAa7B,GAAQe,GAAW,cAC/Cf,KAAK,SACL8B,YAAahB,EAAKa,OAClBI,UAAWjB,EAAKc,MACZd,GALN,aAOG7C,MCjBM+D,G,MAA8B,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC3D,OACE,qBAAK9F,UAAU,WAAf,SACG6D,EAAMlC,KAAI,YAAoC,IAAjCyB,EAAgC,EAAhCA,KAAMO,EAA0B,EAA1BA,KAAML,EAAoB,EAApBA,MAClB1B,EJRP,SAAmB2B,EAAqBD,GAE7C,OADgBC,EAAS,EAAItB,EAAUG,GACxBkB,GIMKyC,CAD8B,EAAbxC,OACCD,GAChC,OACE,cAAC,EAAD,CAEEK,KAAMA,EACN/B,MAAOA,EACPoE,SAAUJ,EACVN,OAAQ,kBAAMO,EAAKzC,IACnBmC,KAAM,kBAAMO,EAAK1C,KALZA,UCbJ6C,EAA6B,WACxC,IAAMxF,EAAeH,IACbS,EAAeE,IAAfF,WAFsC,ECazC,YAA4D,IAApCN,EAAmC,EAAnCA,aACzByF,EAAkC,GAD0B,EAGlC5E,mBAAmC,MAHD,mBAGzDX,EAHyD,KAGhDwF,EAHgD,OAKlC7E,oBAAS,GALyB,mBAKzDsE,EALyD,KAKhDQ,EALgD,OAMpC9E,mBAA2B,MANS,mBAMzD+E,EANyD,KAMjDC,EANiD,KAQ1DC,EAAQhG,iBAAO,IAAIE,GARuC,4CAUhE,0CAAA+F,EAAA,6DAAoBzF,EAApB,+BAAiDH,EAC/CwF,GAAW,GADb,SAEuBK,IAAU1F,WAAWwF,EAAM5F,QAASI,GAF3D,OAEQsF,EAFR,OAIED,GAAW,GACXD,EAAWpF,GACXuF,EAAUD,GANZ,4CAVgE,+BAmBjDK,IAnBiD,2EAmBhE,sBAAAF,EAAA,yDACiC,cAAxBD,EAAM5F,QAAQgG,MADvB,gCAEYJ,EAAM5F,QAAQ+F,SAF1B,8CAGME,QAAQC,UAHd,kFAnBgE,kEAyBhE,WAAoBC,GAApB,eAAAN,EAAA,sEACQE,IADR,UAEOL,EAFP,iDAIQU,EAAOV,EAAOR,KAAKiB,EAAKE,YAC9Bd,EAAW,2BAAQA,GAAR,kBAAsBY,EAAOC,IAL1C,4CAzBgE,kEAiChE,WAAoBD,GAApB,SAAAN,EAAA,sEACQE,IADR,UAEOR,EAAYY,GAFnB,iDAIEZ,EAAYY,GAAOhB,OACnBI,EAAW,2BAAQA,GAAR,kBAAsBY,EAAO,OAL1C,4CAjCgE,sBAyChE,MAAO,CAAElB,UAASjF,UAASsG,KAzCqC,2CAyC/BpB,KAzC+B,4CAyCzBC,KAzCyB,6CDVjBoB,CAAa,CAAEzG,iBAAtDwG,EAHsC,EAGtCA,KAAMpB,EAHgC,EAGhCA,KAAMC,EAH0B,EAG1BA,KAAMF,EAHoB,EAGpBA,QAASjF,EAHW,EAGXA,QAMnC,OAJAoE,qBAAU,WACHa,GAAW7E,IAAeJ,GAASsG,EAAKlG,KAC5C,CAACkG,EAAMrB,EAASjF,EAASI,IAErB,cAAC,EAAD,CAAU6E,QAASA,EAASC,KAAMA,EAAMC,KAAMA,KEV1CqB,EAAiB,WAC5B,OACE,cAAC,EAAD,UACE,sBAAKnH,UAAU,aAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCLKoH,EAAW,WAGtB,OAFqB9G,IAEG,cAAC,EAAD,IAAiB,cAAC,EAAD,KCJ9B+G,EAAM,WACjB,OACE,sBAAKrH,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAMA,UAAU,cAAhB,SACE,cAAC,EAAD,MAEF,cAAC,EAAD,QCGSsH,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASgD,eAAe,SAM1BZ,M","file":"static/js/main.b851c75c.chunk.js","sourcesContent":["import React, { FC } from 'react'\r\nimport './style.css'\r\n\r\nexport const Footer: FC = () => {\r\n  const currentYear = new Date().getFullYear()\r\n  return (\r\n    <footer className=\"footer\">\r\n      <a href=\"https://newline.io\">NewLine.co</a>\r\n      <br />\r\n      {currentYear}\r\n    </footer>\r\n  )\r\n}","import React, { FC } from 'react'\r\nimport './style.css'\r\n\r\nexport const Logo: FC = () => {\r\n  return (\r\n    <h1 className=\"logo\">\r\n      <span role=\"img\" aria-label=\"metal hand emoji\">\r\n        ðŸ¤˜\r\n      </span>\r\n      <span role=\"img\" aria-label=\"musical keyboard emoji\">\r\n        ðŸŽ¹\r\n      </span>\r\n      <span role=\"img\" aria-label=\"musical notes emoji\">\r\n        ðŸŽ¶\r\n      </span>\r\n    </h1>\r\n  )\r\n}","import React, { FC } from 'react'\r\n\r\nexport const NoAudioMessage: FC = () => {\r\n\r\n  return (<div>\r\n    <p>Sorry/ it's not gonna work :( </p>\r\n    <p>\r\n      Seems like your browser doesn't support <code>Audio API</code>.\r\n      </p>\r\n  </div>)\r\n}\r\n","import { useRef } from 'react'\r\nimport { Optional } from '../../domain/types'\r\nimport { accessContext } from '../../domain/audio'\r\n\r\nexport function useAudioContext(): Optional<AudioContextType> {\r\n  const AudioCtx = useRef(accessContext())\r\n  return AudioCtx.current\r\n}","import { Optional } from './types'\r\n\r\nexport function accessContext(): Optional<AudioContextType> {\r\n  return window.AudioContext || window.webkitAudioContext || null\r\n}","import { InstrumentName, Player } from \"soundfont-player\";\r\nimport { MidiValue } from \"./note\";\r\nimport { Optional } from \"./types\";\r\n\r\nexport type AudioNodesRegistry = Record<MidiValue, Optional<Player>>;\r\n\r\nexport const DEFAULT_INSTRUMENT: InstrumentName = \"acoustic_grand_piano\";\r\n","import { createContext, useContext } from \"react\";\r\nimport { InstrumentName } from \"soundfont-player\";\r\nimport { DEFAULT_INSTRUMENT } from \"../../domain/sound\";\r\n\r\nexport interface ContextValue {\r\n  instrument: InstrumentName;\r\n  setInstrument: (instrument: InstrumentName) => void;\r\n}\r\n\r\nexport const InstrumentContext = createContext<ContextValue>({\r\n  instrument: DEFAULT_INSTRUMENT,\r\n  setInstrument() {},\r\n});\r\n\r\nexport const InstrumentContextConsumer = InstrumentContext.Consumer;\r\nexport const useInstrument = () => useContext(InstrumentContext);\r\n","import { FC, useState } from \"react\";\r\nimport { DEFAULT_INSTRUMENT } from \"../../domain/sound\";\r\nimport { InstrumentContext } from \"./Context\";\r\n\r\nexport const InstrumentContextProvider: FC = ({ children }) => {\r\n  const [instrument, setInstrument] = useState(DEFAULT_INSTRUMENT);\r\n\r\n  return (\r\n    <InstrumentContext.Provider value={{ instrument, setInstrument }}>\r\n      {children}\r\n    </InstrumentContext.Provider>\r\n  );\r\n};\r\n","import { InstrumentName } from \"soundfont-player\";\r\nimport instruments from \"soundfont-player/names/musyngkite.json\"\r\n\r\ninterface Option {\r\n  value: InstrumentName;\r\n  label: string;\r\n}\r\n\r\ntype OptionList = Option[];\r\ntype InstrumentList = InstrumentName[];\r\n\r\nfunction normalizeList(list: InstrumentList): OptionList {\r\n  return list.map((instrument) => ({\r\n    value: instrument,\r\n    label: instrument.replace(/_/gi, \" \"),\r\n  }));\r\n}\r\n\r\nexport const options = normalizeList(instruments as InstrumentList);\r\n","import { FC, ChangeEvent } from \"react\";\r\nimport { InstrumentName } from \"soundfont-player\";\r\nimport { useInstrument } from \"../../state/Instrument/Context\";\r\nimport { options } from \"./options\";\r\nimport \"./style.css\";\r\n\r\nexport const InstrumentSelector: FC = () => {\r\n  const { instrument, setInstrument } = useInstrument();\r\n\r\n  const updateValue = ({ target }: ChangeEvent<HTMLSelectElement>) =>\r\n    setInstrument(target.value as InstrumentName);\r\n\r\n  return (\r\n    <select className=\"instuments\" onChange={updateValue} value={instrument}>\r\n      {options.map(({ label, value }) => (\r\n        <option key={value} value={value}>\r\n          {label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n","import { OctaveIndex, PitchIndex } from \"./note\";\r\n\r\nexport type Key = string;\r\nexport type Keys = Key[];\r\n\r\nexport const TOP_ROW: Keys = Array.from(\"q2w3er5t6y7u\");\r\nexport const BOTTOM_ROW: Keys = Array.from(\"zsxdcvgbhnjm\");\r\n\r\nexport function selectKey(octave: OctaveIndex, index: PitchIndex): Key {\r\n  const keysRow = octave < 5 ? TOP_ROW : BOTTOM_ROW;\r\n  return keysRow[index];\r\n}\r\n","export type NoteType = 'natural' | 'flat' | 'sharp'\r\nexport type NotePitch = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'\r\nexport type OctaveIndex = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8\r\nexport type MidiValue = number\r\nexport type PitchIndex = number\r\nexport interface Note {\r\n  midi: MidiValue\r\n  type: NoteType\r\n\r\n  pitch: NotePitch\r\n  index: PitchIndex\r\n  octave: OctaveIndex\r\n}\r\n\r\nconst C1_MIDI_NUMBER = 24\r\nconst C4_MIDI_NUMBER = 60\r\nconst B5_MIDI_NUMBER = 83\r\n\r\nexport const LOWER_NOTE = C4_MIDI_NUMBER\r\nexport const HIGHER_NOTE = B5_MIDI_NUMBER\r\nexport const SEMITONES_IN_OCTAVE = 12\r\n\r\nexport const NATURAL_PITCH_INDICES: PitchIndex[] = [\r\n  0,\r\n  2,\r\n  4,\r\n  5,\r\n  7,\r\n  9,\r\n  11\r\n]\r\n\r\nexport const PITCH_REGISTRY: Record<PitchIndex, NotePitch> = {\r\n  0: 'C',\r\n  1: 'C',\r\n  2: 'D',\r\n  3: 'D',\r\n  4: 'E',\r\n  5: 'F',\r\n  6: 'F',\r\n  7: 'G',\r\n  8: 'G',\r\n  9: 'A',\r\n  10: 'A',\r\n  11: 'B'\r\n}\r\n\r\nexport function fromMidi(midi: MidiValue): Note {\r\n  const pianoRange = midi - C1_MIDI_NUMBER\r\n  const octave = (Math.floor(pianoRange / SEMITONES_IN_OCTAVE) +\r\n    1) as OctaveIndex\r\n\r\n  const index = pianoRange % SEMITONES_IN_OCTAVE\r\n  const pitch = PITCH_REGISTRY[index]\r\n\r\n  const isSharp = !NATURAL_PITCH_INDICES.includes(index)\r\n  const type = isSharp ? 'sharp' : 'natural'\r\n\r\n  return { octave, pitch, index, type, midi }\r\n}\r\n\r\ninterface NotesGeneratorSettings {\r\n  fromNote?: MidiValue\r\n  toNote?: MidiValue\r\n}\r\n\r\nexport function generateNotes({\r\n  fromNote = LOWER_NOTE,\r\n  toNote = HIGHER_NOTE\r\n}: NotesGeneratorSettings = {}): Note[] {\r\n  return Array(toNote - fromNote + 1).fill(0).map((_, index) => fromMidi(fromNote + index))\r\n}\r\n\r\nexport const notes = generateNotes()","import { useState, useEffect } from \"react\";\r\nimport { Key as KeyLabel } from \"../../domain/keyboard\"\r\n\r\ntype isPressed = boolean;\r\ntype EventCode = string;\r\n\r\ninterface Settings {\r\n  watchKey: KeyLabel;\r\n  onStartPress: Function;\r\n  onFinishPress: Function;\r\n}\r\n\r\nfunction fromEventCode(code: EventCode): KeyLabel {\r\n  const prefixRegex = /Key|Digit/gi\r\n  return code.replace(prefixRegex, \"\")\r\n}\r\n\r\nfunction equal(watchedKey: KeyLabel, eventCode: EventCode): boolean {\r\n  return (\r\n    fromEventCode(eventCode).toUpperCase() ===\r\n    watchedKey.toUpperCase()\r\n  )\r\n}\r\n\r\nexport function usePressObserver({\r\n  watchKey,\r\n  onFinishPress,\r\n  onStartPress,\r\n}: Settings): isPressed {\r\n  const [pressed, setPressed] = useState<isPressed>(false);\r\n\r\n  useEffect(() => {\r\n    function handlePressStart({ code }: KeyboardEvent) {\r\n      if (pressed || !equal(watchKey, code)) return;\r\n      setPressed(true);\r\n      onStartPress();\r\n    }\r\n\r\n    function handlePressFinish({ code }: KeyboardEvent) {\r\n      if (!pressed || !equal(watchKey, code)) return;\r\n\r\n      setPressed(false);\r\n      onFinishPress();\r\n    }\r\n\r\n    document.addEventListener(\"keydown\", handlePressStart);\r\n    document.addEventListener(\"keyup\", handlePressFinish);\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handlePressStart);\r\n      document.removeEventListener(\"keyup\", handlePressFinish);\r\n    };\r\n  }, [watchKey, pressed, setPressed, onStartPress, onFinishPress]);\r\n\r\n  return pressed\r\n}\r\n","import { FC, ReactEventHandler } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { NoteType } from \"../../domain/note\";\r\nimport \"./style.css\";\r\nimport { usePressObserver } from \"../PressObserver/usePressObserver\";\r\n\r\ninterface KeyProps {\r\n  type: NoteType;\r\n  label: string;\r\n  disabled?: boolean;\r\n  onUp: ReactEventHandler<HTMLButtonElement>;\r\n  onDown: ReactEventHandler<HTMLButtonElement>;\r\n}\r\n\r\nexport const Key: FC<KeyProps> = ({ type, label, ...rest }) => {\r\n  const pressed = usePressObserver({\r\n    watchKey: label,\r\n    onStartPress: rest.onDown,\r\n    onFinishPress: rest.onUp,\r\n  });\r\n\r\n  return (\r\n    <button\r\n      className={clsx(`key key--${type}`, pressed && 'is-pressed')}\r\n      type=\"button\"\r\n      onMouseDown={rest.onDown}\r\n      onMouseUp={rest.onUp}\r\n      {...rest}\r\n    >\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { selectKey } from \"../../domain/keyboard\";\r\nimport { MidiValue, notes } from \"../../domain/note\";\r\nimport { Key } from \"../Key/Key\";\r\nimport \"./style.css\";\r\n\r\nexport interface KayboardProps {\r\n  loading: boolean;\r\n  play: (note: MidiValue) => Promise<void>;\r\n  stop: (note: MidiValue) => Promise<void>;\r\n}\r\n\r\nexport const Keyboard: FC<KayboardProps> = ({ loading, play, stop }) => {\r\n  return (\r\n    <div className=\"keyboard\">\r\n      {notes.map(({ midi, type, index, octave }) => {\r\n        const label = selectKey(octave, index);\r\n        return (\r\n          <Key\r\n            key={midi}\r\n            type={type}\r\n            label={label}\r\n            disabled={loading}\r\n            onDown={() => play(midi)}\r\n            onUp={() => stop(midi)}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useEffect } from \"react\";\r\nimport { useSoundfont } from \"../../adapters/Soundfont/useSoundfont\";\r\nimport { useInstrument } from \"../../state/Instrument/Context\";\r\nimport { useAudioContext } from \"../AudioContextProvider/useAudioContext\";\r\nimport { Keyboard } from \"./Keyboard\";\r\n\r\nexport const KeyboardWithInstrument: FC = () => {\r\n  const AudioContext = useAudioContext()!;\r\n  const { instrument } = useInstrument();\r\n  const { load, play, stop, loading, current } = useSoundfont({ AudioContext });\r\n\r\n  useEffect(() => {\r\n    if (!loading && instrument !== current) load(instrument);\r\n  }, [load, loading, current, instrument]);\r\n\r\n  return <Keyboard loading={loading} play={play} stop={stop} />;\r\n};\r\n","import { useState, useRef } from \"react\";\r\nimport Soundfont, { InstrumentName, Player } from \"soundfont-player\";\r\nimport { MidiValue } from \"../../domain/note\";\r\nimport { AudioNodesRegistry, DEFAULT_INSTRUMENT } from \"../../domain/sound\";\r\nimport { Optional } from \"../../domain/types\";\r\n\r\ninterface Settings {\r\n  AudioContext: AudioContextType;\r\n}\r\n\r\ninterface Adapter {\r\n  loading: boolean;\r\n  current: Optional<InstrumentName>;\r\n\r\n  load(instument?: InstrumentName): Promise<void>;\r\n  play(note: MidiValue): Promise<void>;\r\n  stop(note: MidiValue): Promise<void>;\r\n}\r\n\r\nexport function useSoundfont({ AudioContext }: Settings): Adapter {\r\n  let activeNodes: AudioNodesRegistry = {};\r\n\r\n  const [current, setCurrent] = useState<Optional<InstrumentName>>(null);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [player, setPlayer] = useState<Optional<Player>>(null);\r\n\r\n  const audio = useRef(new AudioContext());\r\n\r\n  async function load(instrument: InstrumentName = DEFAULT_INSTRUMENT) {\r\n    setLoading(true);\r\n    const player = await Soundfont.instrument(audio.current, instrument);\r\n\r\n    setLoading(false);\r\n    setCurrent(instrument);\r\n    setPlayer(player);\r\n  }\r\n\r\n  async function resume() {\r\n    return audio.current.state === \"suspended\"\r\n      ? await audio.current.resume()\r\n      : Promise.resolve();\r\n  }\r\n\r\n  async function play(note: MidiValue) {\r\n    await resume();\r\n    if (!player) return;\r\n\r\n    const node = player.play(note.toString());\r\n    activeNodes = { ...activeNodes, [note]: node };\r\n  }\r\n\r\n  async function stop(note: MidiValue) {\r\n    await resume();\r\n    if (!activeNodes[note]) return;\r\n\r\n    activeNodes[note]!.stop();\r\n    activeNodes = { ...activeNodes, [note]: null };\r\n  }\r\n\r\n  return { loading, current, load, play, stop };\r\n}\r\n","import { FC } from \"react\";\r\nimport { InstrumentContextProvider } from \"../../state/Instrument/Provider\";\r\nimport { InstrumentSelector } from \"../InstrumentSelector/InstrumentSelector\";\r\nimport { KeyboardWithInstrument } from \"../Keyboard/WithInstrument\";\r\n\r\nexport const Playground: FC = () => {\r\n  return (\r\n    <InstrumentContextProvider>\r\n      <div className=\"playground\">\r\n        <KeyboardWithInstrument />\r\n        <InstrumentSelector />\r\n      </div>\r\n    </InstrumentContextProvider>\r\n  );\r\n};\r\n","import { FC } from 'react'\r\nimport { NoAudioMessage } from '../NoAudioMessage/NoAudioMessage'\r\nimport { useAudioContext } from '../AudioContextProvider/useAudioContext'\r\nimport { Playground } from '../Playground/Playground'\r\n\r\nexport const Main: FC = () => {\r\n  const AudioContext = useAudioContext()\r\n\r\n  return !!AudioContext ? <Playground /> : <NoAudioMessage />\r\n}\r\n","import { Footer } from \"./components/Footer/Footer\";\nimport { Logo } from \"./components/Logo/Logo\";\nimport \"./App.css\";\nimport { Main } from \"./components/Main/Main\";\nexport const App = () => {\n  return (\n    <div className=\"app\">\n      <Logo />\n      <main className=\"app-content\">\n        <Main />\n      </main>\n      <Footer />\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}